type Transfer @entity {
  id: ID!
  from: Bytes!
  to: Bytes!
  value: BigInt!
}

type Approval @entity {
    id: ID!
    owner: Bytes!
    spender: Bytes!
    value: BigInt!
}

type DepositSeverino @entity {
    id: ID!
    user: Bytes!
    # pair: [Pair]!
    pid: BigInt!
    amount: BigInt!

}

type EmergencyWithdraw @entity {
    id: ID!
    user: Bytes!
    # pair: [Pair]!
    pid: BigInt!
    amount: BigInt!
}

type Withdraw @entity {
  id: ID!
  user: Bytes!
#   pair: [Pair]!
  pid: BigInt!
  amount: BigInt!
}


type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveETH: BigDecimal! # used for separating per pair reserves and global
  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
}


type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedETH: BigDecimal
}

type TokenBalance @entity {
  id: ID!
  amount: Int!
  token: Token!
}